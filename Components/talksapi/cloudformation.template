{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Creates Stack for TalksApi",

	"Parameters" : {
        "ImageId" : {
            "Type" : "AWS::EC2::Image::Id",
            "Description" : "The base AMI to start with. This is expected to be the latest base Windows 2012 R2 AMI"
        },
        "InstanceType" : {
            "Type" : "String",
            "Description" : "The EC2 instance type to use when creating the application servers",
            "Default"     : "t2.micro"
        },
        "EC2KeyName"   : {
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "Description" : "The EC2 key pair name to use for remoting into the application servers"
        },
        "OpenRemoteDesktopPort" : {
            "Type" : "String",
            "Description" : "If set to Yes the RDP port will be open.",
            "AllowedValues" : [ "Yes", "No" ]
        },
        "AppName" : {
            "Type": "String",
            "Description": "The name of the App that will run on this cloudformation stack"
        },
        "HostedZoneId" : {
            "Type" : "String",
            "Description" : "The DNS Id of an existing Amazon Route 53 hosted zone",
            "Default": "Z34EV4LHVRJO57"
        },
        "Route53DNSName" : {
            "Type" : "String",
            "Description" : "public url/DNS value for this component"
        },
        "ShouldHaveAccessToDb" : {
            "Type" : "String",
            "Description" : "If set to Yes DB security group will be added to stack",
            "AllowedValues" : [ "Yes", "No" ]
        }
    },
    "Conditions"               : {
        "OpenRemoteDesktopPortCondition" : {
            "Fn::Equals" : [
                "Yes",
                {
                    "Ref" : "OpenRemoteDesktopPort"
                }
            ]
        },
        "HasDbAccess" : {
            "Fn::Equals" : [
                "Yes",
                {
                    "Ref": "ShouldHaveAccessToDb"
                }
            ]
        }
    },
    "Resources" : {
       "WaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "Properties" : {
                "Count" : 1,
                "Handle" : {
                    "Ref" : "WaitHandle"
                },
                "Timeout" : "1800"
            }
        },
        "WebServerSecurity"   : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "The security group for the application servers",
                "Tags" : [{
                    "Key" : "SecurityGroupIdentifier",
                    "Value" : "ec2-speakr-rocks"
                }],
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
                ]
            }
        },
        "WebServerInstance"   : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "commands" : {
                            "01-download-dotnetcli" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"((new-object net.webclient).DownloadFile('https://go.microsoft.com/fwlink/?linkid=843448', 'C:\\cfn\\dotnet-dev-win-x64.1.0.1.exe '))\""
                                        ]
                                    ]
                                },
                                "cwd"     : "C:/cfn",
                                "waitAfterCompletion" : 0
                            },
                            "02-install-dotnetcli"  : {
                                "command" : "C:\\cfn\\dotnet-dev-win-x64.1.0.1.exe  /install /quiet /log C:\\cfn\\dotnet-dev-win-x64.1.0.1.txt",
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : 0
                            },
                            "03-import-service-module"  : {
                                "command" : "powershell.exe -Command Import-Module -Name ServerManager",
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : 0
                            },
                            "04-install-web-server"  : {
                                "command" : "powershell.exe -Command Install-WindowsFeature Web-Server,Application-Server,AS-Web-Support",
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : 0
                            },
                            "05-download-host-agent" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe ",
                                            "Set-ExecutionPolicy RemoteSigned; ",
                                            "Import-Module AWSPowerShell; ",
                                            "Read-S3Object ",
                                            "-BucketName aws-codedeploy-eu-west-1 ",
                                            "-Key latest/codedeploy-agent.msi ",
                                            "-File codedeploy-agent.msi"
                                        ]
                                    ]
                                },
                                "cwd"     : "C:/cfn",
                                "waitAfterCompletion" : 0
                            },
                            "06-install-host-agent"  : {
                                "command" : "C:\\cfn\\codedeploy-agent.msi /quiet /l C:\\cfn\\host-agent-install-log.txt",
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : 0
                            },
                            "07-download-dotnet-hosting" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -Command \"((new-object net.webclient).DownloadFile('https://go.microsoft.com/fwlink/?linkid=844461', 'C:\\cfn\\DotNetCore.1.0.4_1.1.1-WindowsHosting.exe'))\""
                                        ]
                                    ]
                                },
                                "cwd"     : "C:/cfn",
                                "waitAfterCompletion" : 0
                            },
                            "08-install-dotnet-hosting"  : {
                                "command" : "C:\\cfn\\DotNetCore.1.0.4_1.1.1-WindowsHosting.exe /install /quiet /log C:\\cfn\\DotNetCore.1.0.4_1.1.1-WindowsHosting.txt",
                                "ignoreErrors" : "true",
                                "waitAfterCompletion" : 0
                            },
                            "09-add-environment-variables" : {
                                "command" : {
                                    "Fn::If" : [
                                        "HasDbAccess",
                                        { 
                                            "Fn::Join" : [ "", [
                                                "setx SPEAKR_DB_SERVER ", {"Fn::ImportValue" : "DbSpeakrRocksServer"}, " /M |",
                                                "setx SPEAKR_DB_NAME ", {"Fn::ImportValue" : "DbSpeakrRocksName"}, " /M |",
                                                "setx SPEAKR_DB_USER ", {"Fn::ImportValue" : "DbSpeakrRocksUser"}, " /M |",
                                                "setx SPEAKR_DB_PASSWORD ", {"Fn::ImportValue" : "DbSpeakrRocksPassword"}, " /M"
                                            ]
                                        ]},
                                        { "Fn::Join" : ["", [""]] }
                                    ]
                                }
                            },
                            "10-signal-ready"        : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "\"C:\\Program Files\\Amazon\\cfn-bootstrap\\cfn-signal\"",
                                            " -e 0 \"",
                                            {
                                                "Ref" : "WaitHandle"
                                            },
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : 0
                            }
                        },
                        "services" : {
                            "windows" : {
                                "codedeploy-agent" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "commands"      : [
                                        "01-install-host-agent"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "IamInstanceProfile" : {
                    "Ref" : "WebServerInstanceRoleInstanceProfile"
                },
                "ImageId"            : {
                    "Ref" : "ImageId"
                },
                "InstanceType"       : {
                    "Ref" : "InstanceType"
                },
                "KeyName"            : {
                    "Ref" : "EC2KeyName"
                },
                "SecurityGroups" : [{
                    "Fn::If" : [
                        "HasDbAccess",
                        { "Fn::ImportValue" : "DbSpeakerRocksEC2SecurityGroupId"},
                        { "Ref" : "WebServerSecurity" }
                    ]
                }],
                "Tags"               : [
                    {
                        "Key" : "Name",
                        "Value" : {"Ref": "AppName"}
                    }
                ],
                "UserData"           : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script>\n",
                                "mkdir c:\\cfn\n",
                                "mkdir c:\\cfn\\log\n",
                                "c:\\\"Program Files\"\\Amazon\\cfn-bootstrap\\cfn-init.exe -s ",
                                {
                                    "Ref" : "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                " -r WebServerInstance > c:\\cfn\\log\\cfn-call-log 2>&1",
                                "</script>"
                            ]
                        ]
                    }
                }
            }
        },
        "WebServerSetDnsRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {"Ref" : "HostedZoneId"},
                "Name" : {"Ref" : "Route53DNSName"},
                "Comment" : "DNS name for the EC2 instance",
                "Type" : "A",
                "TTL" : "900",
                "ResourceRecords" : [ { "Fn::GetAtt" : [ "WebServerInstance", "PublicIp" ] } ]
            }
        },
        "CodeDeployTrustRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Statement" : [
                        {
                            "Sid" : "1",
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "codedeploy.eu-west-1.amazonaws.com"
                                ]
                            },
                            "Action"    : "sts:AssumeRole"
                        }
                    ]
                },
                "Path"                     : "/"
            }
        },
        "CodeDeployRolePolicies" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "CodeDeployPolicy",
                "PolicyDocument" : {
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Resource" : [
                                "*"
                            ],
                            "Action"   : [
                                "ec2:Describe*"
                            ]
                        },
                        {
                            "Effect" : "Allow",
                            "Resource" : [
                                "*"
                            ],
                            "Action"   : [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat"
                            ]
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "CodeDeployTrustRole"
                    }
                ]
            }
        },
        "WebServerInstanceRole"           : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/"
            }
        },
        "WebServerInstanceRolePolicies"   : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "WebServerInstanceRole",
                "PolicyDocument" : {
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "autoscaling:Describe*",
                                "cloudformation:Describe*",
                                "cloudformation:GetTemplate",
                                "s3:Get*"
                            ],
                            "Resource" : "*"
                        },
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "dynamodb:*",
                                "swf:*",
                                "sns:*",
                                "logs:*"
                            ],
                            "Resource" : "*"
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "WebServerInstanceRole"
                    }
                ]
            }
        },
        "WebServerInstanceRoleInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [
                    {
                        "Ref" : "WebServerInstanceRole"
                    }
                ]
            }
        }
	},

	"Outputs" : {
		"WebServerInstanceDNS" : {
		    "Value" : {"Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName"]},
            "Description" : "The DNS for the WebServerInstance that will have the ASP.NET Core application deployed to."
		},
        "CodeDeployTrustRoleARN" : {
            "Value" : {
                "Fn::GetAtt" : [
                    "CodeDeployTrustRole",
                    "Arn"
                ]
            }
        },
        "DomainName": {
            "Description": "Fully qualified domain name",
            "Value": { "Ref": "WebServerSetDnsRecord" }
        }
	}
}
